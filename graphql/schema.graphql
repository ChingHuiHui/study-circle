"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTimeUtc @scalar(class: "DateTimeUtc")

type Department {
    id: ID!
    name: String!
}

type Event {
    id: ID!
    department: Department! @belongsTo
    body: String!
    title: String!
    note: String!
    date: DateTimeUtc!
    created_at: DateTimeUtc!
    updated_at: DateTimeUtc!
}

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
        "Search by primary key."
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

        "Search by email address."
        email: String
            @eq
            @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    events: [Event!]! @all
    departments: [Department!]! @all
}

type Mutation {
    createEvent(
        department: ID!
        title: String! @rules(apply: ["required"])
        body: String
        note: String
        date: DateTimeUtc!
    ): Event @create

    updateEvent(
        id: ID!
        department: ID!
        title: String! @rules(apply: ["required"])
        body: String
        note: String
        date: DateTimeUtc!
    ): Event @update

    deleteEvent(id: ID!): Event @delete
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTimeUtc

    "When the account was created."
    created_at: DateTimeUtc!

    "When the account was last updated."
    updated_at: DateTimeUtc!
}
